buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"

ext {
 jacocoVersion ='0.7.7.201606060606'
}

group = 'com.ninja.boxing'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

jacoco {
 toolVersion = jacocoVersion
}

repositories {
    mavenCentral()
    jcenter()
}

checkstyle {
        checkstyleTest.enabled = false
       configFile = new File(rootDir, "config\\checkstyle\\checkstyle.xml")
    }
    
  tasks.withType(Checkstyle) {
  reports {
    html.destination rootProject.file("build/reports/checkstyle/checkstyle.html")
  }
}

findbugs{
    ignoreFailures=true
    findbugsTest.enabled=false
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}


tasks.withType(Pmd){
    reports{
        xml.enabled=true
        html.enabled=true
    }
}

pmd {
   ignoreFailures = true
    pmdTest.enabled=false
    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-controversial',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled = true
        csv.enabled = true
        html.enabled = true
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*CommonEnum**',
                    '**/*CommonConstant**',
                    '**/*AppConfiguration**',
                    '**/BoxingNinjaApplication**'
            ])
        })
    }
}

apply plugin: 'jacoco'

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}

// very important otherwise build would not fail unless you explicitly run the jacocoTestCoverageVerification task.
check.dependsOn jacocoTestCoverageVerification

test.finalizedBy jacocoTestReport

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.0.5-beta'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.2'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.2'
    testCompile group: 'org.powermock', name: 'powermock-api-support', version: '1.6.2'
    testCompile 'org.powermock:powermock-api-easymock:1.6.2'
}
